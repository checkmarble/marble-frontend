openapi: 3.0.3
info:
  version: 1.0.0
  title: 'Marble API'
  description: 'Consume Marble internal endpoints'
tags:
  - name: Admin
    description: Admin operations.
  - name: Data Model
    description: Operations about data model.
  - name: Authorization
    description: Operations about authorization.
  - name: Users
    description: Operations about users.
  - name: Organizations
    description: Operations about organizations.
  - name: Decisions
    description: Operations about decisions.
  - name: Ingestions
    description: Operations about data ingestion.
  - name: Scenarios
    description: Operations about scenarios.
  - name: Scenario Iterations
    description: Operations about scenario iterations.
  - name: Scenario Iteration Rules
    description: Operations about scenario iteration rules.
  - name: Scenario Publications
    description: Operations about scenario publications.
  - name: CustomLists
    description: Operations about custom lists.
  - name: Editor
    description: Operations about editor.
servers:
  - url: 'http://localhost:8080'
    description: Local devlopment server
paths:
  /token:
    post:
      tags:
        - Authorization
      summary: Get an access token
      description: You need to suply either "X-API-Key" or “Authorization" header
      operationId: postToken
      security: []
      parameters:
        - in: header
          description: 'Valid Api Key token to generate a new access token'
          name: X-API-Key
          schema:
            type: string
        - in: header
          description: 'Valid bearer token to generate a new access token'
          name: Authorization
          schema:
            type: string
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/401'
  /credentials:
    get:
      tags:
        - Authorization
      summary: Get user credentials included in the token
      description: You need to suply either "X-API-Key" or “Authorization" header
      operationId: getCredentials
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Credentials included in the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /decisions:
    get:
      tags:
        - Decisions
      summary: List decisions
      operationId: listDecisions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of corresponding decisions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Decision'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Decisions
      summary: Create a decision
      operationId: createDecision
      security:
        - bearerAuth: []
      requestBody:
        description: 'Payload object used to be trigger the decision engine'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDecisionBody'
        required: true
      responses:
        '200':
          description: The decision corresponding to the provided payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decision'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /decisions/{decisionId}:
    get:
      tags:
        - Decisions
      summary: Get a decision by id
      operationId: getDecision
      security:
        - bearerAuth: []
      parameters:
        - name: decisionId
          description: ID of the decision that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The decision corresponding to the provided `decisionId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decision'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /ingestion/{objectType}:
    post:
      tags:
        - Ingestions
      summary: Ingest some data
      operationId: createIngestion
      security:
        - bearerAuth: []
      parameters:
        - name: objectType
          description: Type of the data that needs to be ingested
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'Data that needs to be added to the database. The `objectType` is used to determine the type of the data'
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '201':
          description: Data created
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /custom-lists:
    get:
      tags:
        - CustomList
      summary: List custom list
      operationId: listCustomLists
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of corresponding custom lists
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_lists
                properties:
                  custom_lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - CustomList
      summary: Create a custom list
      operationId: createCustomList
      security:
        - bearerAuth: []
      requestBody:
        description: Custom list object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomListBody'
        required: true
      responses:
        '200':
          description: Created custom list
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_list
                properties:
                  custom_list:
                    $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /custom-lists/{customListId}:
    get:
      tags:
        - CustomList
      summary: Get values of the corresponding custom list
      operationId: getCustomList
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Values from the custom list corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_list
                properties:
                  custom_list:
                    $ref: '#/components/schemas/CustomListWithValues'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - CustomList
      summary: Update a custom list
      operationId: updateCustomList
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomListBody'
        required: true
      responses:
        '200':
          description: The updated custom list corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - CustomList
      summary: Delete a custom list
      operationId: deleteCustomList
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The deleted custom list corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /custom-lists/{customListId}/values:
    post:
      tags:
        - CustomList
      summary: Create a custom list value
      operationId: createCustomListValue
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list on which the value will be added
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Custom list value object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomListValueBody'
        required: true
      responses:
        '200':
          description: Created custom list Value
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_list_value
                properties:
                  custom_list_value:
                    $ref: '#/components/schemas/CustomListValue'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
        '422':
          $ref: '#/components/responses/422'
    delete:
      tags:
        - CustomList
      summary: Delete a custom list value
      operationId: deleteCustomListValue
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list associated with the deleted value
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Delete custom list value object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCustomListValueBody'
        required: true
      responses:
        '200':
          description: The deleted custom list value corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListValue'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenarios:
    get:
      tags:
        - Scenarios
      summary: List scenarios
      operationId: listScenarios
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of corresponding scenario
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scenario'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Scenarios
      summary: Create a scenario
      operationId: createScenario
      security:
        - bearerAuth: []
      requestBody:
        description: 'Scenario object that needs to be added to the database'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenarioBody'
        required: true
      responses:
        '200':
          description: Created scenario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /scenarios/{scenarioId}:
    get:
      tags:
        - Scenarios
      summary: Get a scenario by id
      operationId: getScenario
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario corresponding to the provided `scenarioId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Scenarios
      summary: Update a scenario
      operationId: updateScenario
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScenarioBody'
        required: true
      responses:
        '200':
          description: The updated scenario corresponding to the provided `scenarioId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations:
    get:
      tags:
        - Scenario Iterations
      summary: List iterations
      description: List iterations corresponding to filters
      operationId: listScenarioIterations
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario returned iterations should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scenario iterations corresponding to filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioIterationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Iterations
      summary: Create a scenario iteration
      description: Create a scenario iteration for a given `scenarioId`
      operationId: createScenarioIteration
      security:
        - bearerAuth: []
      requestBody:
        description: 'Scenario iteration object to create and linked `scenarioId`'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenarioIterationBody'
        required: true
      responses:
        '200':
          description: The created scenario iteration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations/{scenarioIterationId}:
    get:
      tags:
        - Scenario Iterations
      summary: Get a scenario iteration by id
      operationId: getScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario iteration corresponding to the provided `scenarioIterationId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Iterations
      summary: Create draft from a scenario iteration
      operationId: createDraftFromScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration that need to be used as base for the draft
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The create draft scenario iteration corresponding to the scenario iteration provided `scenarioIterationId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Scenario Iterations
      summary: Update a scenario iteration
      operationId: updateScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario iteration object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScenarioIterationBody'
        required: true
      responses:
        '200':
          description: The updated scenario iteration corresponding to the provided `scenarioIterationId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - iteration
                properties:
                  iteration:
                    $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations/{scenarioIterationId}/validate:
    get:
      tags:
        - Scenario Iterations
      summary: Validate a scenario iteration by id
      operationId: validateScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario validation of the iteration
          content:
            application/json:
              schema:
                type: object
                required:
                  - scenario_validation
                properties:
                  scenario_validation:
                    $ref: '#/components/schemas/ScenarioValidationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Iterations
      summary: Validate a scenario iteration using the rule or trigger passed in body
      operationId: validateScenarioIterationWithGivenTriggerOrRule
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Trigger or rule to validate'
        content:
          application/json:
            schema:
              type: object
              required:
                - trigger_or_rule
                - rule_id
              properties:
                trigger_or_rule:
                  $ref: '#/components/schemas/NodeDto'
                rule_id:
                  type: string
                  nullable: true
                  format: uuid
        required: true
      responses:
        '200':
          description: The scenario validation of the iteration using the rule or tigger passed in the body
          content:
            application/json:
              schema:
                type: object
                required:
                  - scenario_validation
                properties:
                  scenario_validation:
                    $ref: '#/components/schemas/ScenarioValidationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iteration-rules:
    get:
      tags:
        - Scenario Iteration Rules
      summary: List rules
      description: List rules using provided filters
      operationId: listScenarioIterationRules
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration returned rules should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scenario iterations rules corresponding to filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Iteration Rules
      summary: Create a scenario iteration rule
      description: Create a scenario iteration rule for a given `scenarioIterationId`
      operationId: createScenarioIterationRule
      security:
        - bearerAuth: []
      requestBody:
        description: 'Scenario iteration rule object to create and linked `scenarioIterationId`'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenarioIterationRuleBody'
        required: true
      responses:
        '200':
          description: The created scenario iteration rule
          content:
            application/json:
              schema:
                type: object
                required:
                  - rule
                properties:
                  rule:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iteration-rules/{ruleId}:
    get:
      tags:
        - Scenario Iteration Rules
      summary: Get a scenario iteration rule by id
      operationId: getScenarioIterationRule
      security:
        - bearerAuth: []
      parameters:
        - name: ruleId
          description: ID of the rule that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario iteration rule corresponding to the provided `ruleId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - rule
                properties:
                  rule:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Scenario Iteration Rules
      summary: Update a scenario iteration rule
      operationId: updateScenarioIterationRule
      security:
        - bearerAuth: []
      parameters:
        - name: ruleId
          description: ID of the rule that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario iteration rule object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScenarioIterationRuleBody'
        required: true
      responses:
        '200':
          description: The updated scenario iteration rule corresponding to the provided `ruleId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - rule
                properties:
                  rule:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Scenario Iteration Rules
      summary: Delete a scenario iteration rule
      operationId: deleteScenarioIterationRule
      security:
        - bearerAuth: []
      parameters:
        - name: ruleId
          description: ID of the rule that need to be delete
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The rule has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-publications:
    get:
      tags:
        - Scenario Publications
      summary: List scenario publications
      description: List scenario publications using provided filters
      operationId: listScenarioPublications
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario returned publications should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: scenarioIterationId
          description: ID of the scenario iteration returned publications should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: publicationAction
          description: publication action to return
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PublicationAction'
      responses:
        '200':
          description: Scenario publications corresponding to filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioPublication'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Publications
      summary: Create a scenario publication
      operationId: createScenarioPublication
      security:
        - bearerAuth: []
      requestBody:
        description: 'Describe the scenario publication action'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenarioPublicationBody'
        required: true
      responses:
        '200':
          description: The list of created scenario publication actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioPublication'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-publications/{scenarioPublicationId}:
    get:
      tags:
        - Scenario Publications
      summary: Get a scenario publication by id
      operationId: getScenarioPublication
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioPublicationId
          description: ID of the scenario publication that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario publication corresponding to the provided `scenarioPublicationId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioPublication'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model:
    get:
      tags:
        - Data Model
      summary: Get the data model associated with the current organization (present in the JWT)
      operationId: getDataModel
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The scenario publication corresponding to the provided `scenarioPublicationId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - data_model
                properties:
                  data_model:
                    $ref: '#/components/schemas/DataModelDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /apikeys:
    get:
      tags:
        - Authorization
      summary: List api keys associated with the current organization (present in the JWT)
      operationId: listApiKeys
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The apikeys corresponding to the current organization (present in the JWT)
          content:
            application/json:
              schema:
                type: object
                required:
                  - api_keys
                properties:
                  api_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /users:
    get:
      tags:
        - Admin
        - Users
      summary: List all users present in the database
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The list of users present in the database
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Admin
        - Users
      summary: Create a user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        description: Describe the user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '200':
          description: The created user
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /users/{userId}:
    get:
      tags:
        - Admin
        - Users
      summary: Get a user by id
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: ID of the user that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user corresponding to the provided `userId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Admin
        - Users
      summary: Delete a user by id
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: ID of the user that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The user has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /organizations:
    get:
      tags:
        - Admin
        - Organizations
      summary: List all organizations present in the database
      operationId: listOrganizations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The list of organizations present in the database
          content:
            application/json:
              schema:
                type: object
                required:
                  - organizations
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Admin
        - Organizations
      summary: Create an organization
      operationId: createOrganization
      security:
        - bearerAuth: []
      requestBody:
        description: Describe the organization to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationBodyDto'
        required: true
      responses:
        '200':
          description: The created organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - organization
                properties:
                  organization:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /organizations/{organizationId}:
    get:
      tags:
        - Admin
        - Organizations
      summary: Get an organization by id
      operationId: getOrganization
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The organization corresponding to the provided `organizationId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - organization
                properties:
                  organization:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Admin
        - Organizations
      summary: Update an organization by id
      operationId: updateOrganization
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Describe the organization to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationBodyDto'
        required: true
      responses:
        '200':
          description: The updated organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - organization
                properties:
                  organization:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Admin
        - Organizations
      summary: Delete an organization by id
      operationId: deleteOrganization
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The organization has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /organizations/{organizationId}/users:
    get:
      tags:
        - Admin
        - Organizations
      summary: List all users of an organization
      operationId: listOrganizationUsers
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of users of the organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /editor/{scenarioId}/identifiers:
    get:
      tags:
        - Editor
      summary: List all identifiers
      operationId: listIdentifiers
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of identifiers
          content:
            application/json:
              schema:
                type: object
                required:
                  - database_accessors
                  - payload_accessors
                properties:
                  database_accessors:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeDto'
                  payload_accessors:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /editor/{scenarioId}/operators:
    get:
      tags:
        - Editor
      summary: List all operators
      operationId: listOperators
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of operators
          content:
            application/json:
              schema:
                type: object
                required:
                  - operators_accessors
                properties:
                  operators_accessors:
                    type: array
                    items:
                      $ref: '#/components/schemas/FuncAttributes'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
components:
  schemas:
    Organization:
      type: object
      required:
        - id
        - name
        - database_name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        database_name:
          type: string
    CreateOrganizationBodyDto:
      type: object
      required:
        - name
        - database_name
      properties:
        name:
          type: string
        database_name:
          type: string
    UpdateOrganizationBodyDto:
      type: object
      properties:
        name:
          type: string
        database_name:
          type: string
    UserDto:
      type: object
      required:
        - user_id
        - email
        - role
        - organization_id
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
        role:
          type: string
        organization_id:
          type: string
          format: uuid
    CreateUser:
      type: object
      required:
        - email
        - role
        - organization_id
      properties:
        email:
          type: string
        role:
          type: string
        organization_id:
          type: string
          format: uuid
    ApiKey:
      type: object
      required:
        - api_key_id
        - organization_id
        - key
        - role
      properties:
        api_key_id:
          type: string
        organization_id:
          type: string
          format: uuid
        key:
          type: string
        role:
          type: string
    LinkToSingleDto:
      type: object
      required:
        - linked_table_name
        - parent_field_name
        - child_field_name
      properties:
        linked_table_name:
          type: string
        parent_field_name:
          type: string
        child_field_name:
          type: string
    DataModelFieldDto:
      type: object
      required:
        - name
        - nullable
        - data_type
        - description
      properties:
        name:
          type: string
        data_type:
          type: string
          enum: [Bool, Int, Float, String, Timestamp, unknown]
        nullable:
          type: boolean
        description:
          type: string
    DataModelDto:
      type: object
      required:
        - tables
      properties:
        tables:
          type: object
          additionalProperties:
            type: object
            required:
              - name
              - fields
              - description
            properties:
              name:
                type: string
              fields:
                type: object
                additionalProperties:
                  type: object
                  $ref: '#/components/schemas/DataModelFieldDto'
              links_to_single:
                type: object
                additionalProperties:
                  type: object
                  $ref: '#/components/schemas/LinkToSingleDto'
              description:
                type: string

    Token:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: string
          format: date-time
    CredentialsDto:
      type: object
      required:
        - credentials
      properties:
        credentials:
          type: object
          required:
            - organization_id
            - role
            - actor_identity
            - permissions
          properties:
            organization_id:
              type: string
            role:
              type: string
            actor_identity:
              type: object
              properties:
                user_id:
                  type: string
                email:
                  type: string
                api_key_name:
                  type: string
            permissions:
              type: array
              items:
                type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
    Decision:
      type: object
      required:
        - id
        - created_at
        - trigger_object
        - trigger_object_type
        - outcome
        - scenario
        - rules
        - score
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        trigger_object:
          type: object
        trigger_object_type:
          type: string
        outcome:
          type: string
          enum: ['approve', 'review', 'decline', 'null', 'unknown']
        scenario:
          type: object
          required:
            - id
            - name
            - description
            - version
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            description:
              type: string
            version:
              type: integer
        rules:
          type: array
          items:
            type: object
            required:
              - name
              - description
              - score_modifier
              - result
            properties:
              name:
                type: string
              description:
                type: string
              score_modifier:
                type: integer
              result:
                type: boolean
              error:
                $ref: '#/components/schemas/Error'
        score:
          type: integer
        error:
          $ref: '#/components/schemas/Error'
    CreateDecisionBody:
      type: object
      required:
        - scenario_id
        - trigger_object
        - object_type
      properties:
        scenario_id:
          type: string
          format: uuid
        trigger_object:
          type: object
        object_type:
          type: string
    CustomList:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CustomListValue:
      type: object
      required:
        - id
        - value
      properties:
        id:
          type: string
          format: uuid
        value:
          type: string
    CustomListWithValues:
      allOf:
        - $ref: '#/components/schemas/CustomList'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/CustomListValue'
    CreateCustomListBody:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    UpdateCustomListBody:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    CreateCustomListValueBody:
      type: object
      required:
        - value
      properties:
        value:
          type: string
    DeleteCustomListValueBody:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: id of the custom list value to delete
    Scenario:
      type: object
      required:
        - id
        - name
        - description
        - triggerObjectType
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        triggerObjectType:
          type: string
        createdAt:
          type: string
          format: date-time
        liveVersionId:
          type: string
          format: uuid
    CreateScenarioBody:
      type: object
      required:
        - name
        - description
        - triggerObjectType
      properties:
        name:
          type: string
        description:
          type: string
        triggerObjectType:
          type: string
    UpdateScenarioBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ScenarioIterationDto:
      type: object
      required:
        - id
        - scenarioId
        - version
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        scenarioId:
          type: string
          format: uuid
        version:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ScenarioIterationWithBodyDto:
      allOf:
        - $ref: '#/components/schemas/ScenarioIterationDto'
        - type: object
          required:
            - body
          properties:
            body:
              type: object
              required:
                - rules
              properties:
                trigger_condition_ast_expression:
                  nullable: true
                  allOf:
                    - $ref: '#/components/schemas/NodeDto'
                scoreReviewThreshold:
                  type: integer
                  minimum: 0
                scoreRejectThreshold:
                  type: integer
                  minimum: 0
                rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
                schedule:
                  type: string
    CreateScenarioIterationBody:
      type: object
      required:
        - scenarioId
      properties:
        scenarioId:
          type: string
          format: uuid
        body:
          type: object
          properties:
            trigger_condition_ast_expression:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/NodeDto'
            scoreReviewThreshold:
              type: integer
              minimum: 0
            scoreRejectThreshold:
              type: integer
              minimum: 0
            rules:
              type: array
              items:
                $ref: '#/components/schemas/CreateScenarioIterationRuleBody'
    UpdateScenarioIterationBody:
      type: object
      properties:
        body:
          type: object
          properties:
            trigger_condition_ast_expression:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/NodeDto'
            scoreReviewThreshold:
              type: integer
              minimum: 0
            scoreRejectThreshold:
              type: integer
              minimum: 0
            schedule:
              type: string
    ScenarioIterationRuleDto:
      type: object
      required:
        - id
        - scenarioIterationId
        - displayOrder
        - name
        - description
        - formula_ast_expression
        - scoreModifier
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        scenarioIterationId:
          type: string
          format: uuid
        displayOrder:
          type: integer
        name:
          type: string
        description:
          type: string
        formula_ast_expression:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/NodeDto'
        scoreModifier:
          type: integer
        createdAt:
          type: string
          format: date-time
    ScenarioValidationDto:
      type: object
      required:
        - errors
        - trigger_evaluation
        - rules_evaluations
      properties:
        errors:
          type: array
          items:
            type: string
        trigger_evaluation:
          $ref: '#/components/schemas/NodeEvaluationDto'
        rules_evaluations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NodeEvaluationDto'
    CreateScenarioIterationRuleBody:
      type: object
      required:
        - scenarioIterationId
        - displayOrder
        - name
        - description
        - formula_ast_expression
        - scoreModifier
      properties:
        scenarioIterationId:
          type: string
          format: uuid
        displayOrder:
          type: integer
        name:
          type: string
        description:
          type: string
        formula_ast_expression:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/NodeDto'
        scoreModifier:
          type: integer
    UpdateScenarioIterationRuleBody:
      type: object
      properties:
        displayOrder:
          type: integer
        name:
          type: string
        description:
          type: string
        formula_ast_expression:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/NodeDto'
        scoreModifier:
          type: integer
    ScenarioPublication:
      type: object
      required:
        - id
        - createdAt
        - scenarioIterationId
        - publicationAction
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        scenarioIterationId:
          type: string
          format: uuid
        publicationAction:
          $ref: '#/components/schemas/PublicationAction'
    CreateScenarioPublicationBody:
      type: object
      required:
        - scenarioIterationId
        - publicationAction
      properties:
        scenarioIterationId:
          type: string
          format: uuid
        publicationAction:
          $ref: '#/components/schemas/PublicationAction'
    PublicationAction:
      type: string
      enum: ['publish', 'unpublish']
    ConstantDto:
      nullable: true
      example: 'some constant value'
      oneOf:
        - type: string
        - type: number
        - type: boolean
        - type: array
          items:
            $ref: '#/components/schemas/ConstantDto'
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/ConstantDto'
    NodeDto:
      type: object
      properties:
        name:
          type: string
          example: '>'
        constant:
          $ref: '#/components/schemas/ConstantDto'
        children:
          type: array
          items:
            $ref: '#/components/schemas/NodeDto'
          example: [{ constant: 4 }]
        named_children:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NodeDto'
          example: { 'field_name': { constant: 'account' } }
    NodeEvaluationDto:
      type: object
      required:
        - return_value
        - errors
      properties:
        return_value:
          $ref: '#/components/schemas/ConstantDto'
        errors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EvaluationErrorDto'
        children:
          type: array
          items:
            $ref: '#/components/schemas/NodeEvaluationDto'
        named_children:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NodeEvaluationDto'
    EvaluationErrorDto:
      type: object
      required:
        - error
        - message
      properties:
        error:
          $ref: '#/components/schemas/EvaluationErrorCodeDto'
        message:
          type: string
        argument_index:
          type: integer
        argument_name:
          type: string
    EvaluationErrorCodeDto:
      type: string
      enum:
        - UNEXPECTED_ERROR
        - UNDEFINED_FUNCTION
        - WRONG_NUMBER_OF_ARGUMENTS
        - MISSING_NAMED_ARGUMENT
        - ARGUMENTS_MUST_BE_INT_OR_FLOAT
        - ARGUMENT_MUST_BE_INTEGER
        - ARGUMENT_MUST_BE_STRING
        - ARGUMENT_MUST_BE_BOOLEAN
        - ARGUMENT_MUST_BE_LIST
        - ARGUMENT_MUST_BE_CONVERTIBLE_TO_DURATION
        - ARGUMENT_MUST_BE_TIME
        - ARGUMENT_REQUIRED
    FuncAttributes:
      type: object
      required:
        - name
        - number_of_arguments
      properties:
        name:
          type: string
        number_of_arguments:
          type: number
        named_arguments:
          type: array
          items:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
            example: Unauthorized
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
            example: Forbidden
    '404':
      description: Not found
      content:
        application/json:
          schema:
            type: string
            example: Not found
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            type: string
            example: Duplicate Value
    '422':
      description: Unprocessable Content
      content:
        application/json:
          schema:
            type: object
            description: To be defined
