openapi: 3.0.3
info:
  version: 1.0.0
  title: 'Marble API'
  description: 'Consume Marble internal endpoints'
tags:
  - name: Admin
    description: Admin operations.
  - name: Data Model
    description: Operations about data model.
  - name: Authorization
    description: Operations about authorization.
  - name: Analytics
    description: Operations about analytics.
  - name: ApiKeys
    description: Operations about api keys.
  - name: Users
    description: Operations about users.
  - name: Organizations
    description: Operations about organizations.
  - name: Decisions
    description: Operations about decisions.
  - name: Cases
    description: Operations about cases.
  - name: Ingestions
    description: Operations about data ingestion.
  - name: Scenarios
    description: Operations about scenarios.
  - name: Scenario Iterations
    description: Operations about scenario iterations.
  - name: Scenario Iteration Rules
    description: Operations about scenario iteration rules.
  - name: Scenario Publications
    description: Operations about scenario publications.
  - name: CustomLists
    description: Operations about custom lists.
  - name: Editor
    description: Operations about editor.
  - name: Tags
    description: Operations about tags.
  - name: Transfers
    description: Operations about transfers.
servers:
  - url: 'http://localhost:8080'
    description: Local devlopment server
paths:
  /token:
    post:
      tags:
        - Authorization
      summary: Get an access token
      description: You need to suply either "X-API-Key" or “Authorization" header
      operationId: postToken
      security: []
      parameters:
        - in: header
          description: 'Valid Api Key token to generate a new access token'
          name: X-API-Key
          schema:
            type: string
        - in: header
          description: 'Valid bearer token to generate a new access token'
          name: Authorization
          schema:
            type: string
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/401'
  /credentials:
    get:
      tags:
        - Authorization
      summary: Get user credentials included in the token
      description: You need to suply either "X-API-Key" or “Authorization" header
      operationId: getCredentials
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Credentials included in the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /decisions:
    get:
      tags:
        - Decisions
      summary: List decisions
      operationId: listDecisions
      security:
        - bearerAuth: []
      parameters:
        # Filtering parameters
        - name: case_id[]
          description: decision case_ids used to filter the list
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - $ref: '#/components/parameters/end_date'
        - name: has_case
          description: Filter decisions that have a case associated with them or not (true or false, default returns all)
          in: query
          required: false
          schema:
            type: boolean
        - name: outcome[]
          description: decision outcomes used to filter the list
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Outcome'
        - name: pivot_value
          description: decision pivot value used to filter the list
          in: query
          required: false
          schema:
            type: string
        - name: scenario_id[]
          description: scenario IDs used to filter the list
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: scheduled_execution_id[]
          description: scheduled execution IDs used to filter the list
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - $ref: '#/components/parameters/start_date'
        - name: trigger_object[]
          description: trigger objects used to filter the list
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        # Pagination and sorting parameters
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/next'
        - $ref: '#/components/parameters/offset_id'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/previous'
        - name: sorting
          description: the field used to sort the items
          in: query
          required: false
          schema:
            type: string
            enum:
              - created_at
      responses:
        '200':
          description: List of corresponding decisions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/DecisionDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Decisions
      summary: Create a decision
      operationId: createDecision
      security:
        - bearerAuth: []
      requestBody:
        description: 'Payload object used to be trigger the decision engine'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDecisionBody'
        required: true
      responses:
        '200':
          description: The decision corresponding to the provided payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecisionDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /cases:
    get:
      tags:
        - Cases
      summary: List cases
      operationId: listCases
      security:
        - bearerAuth: []
      parameters:
        - name: status[]
          description: case statuses used to filter the list
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CaseStatus'
        - name: inbox_id[]
          description: inbox IDs used to filter the list
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - $ref: '#/components/parameters/start_date'
        - $ref: '#/components/parameters/end_date'
        - name: sorting
          description: the field used to sort the items
          in: query
          required: false
          schema:
            type: string
            enum:
              - created_at
        - $ref: '#/components/parameters/offset_id'
        - $ref: '#/components/parameters/previous'
        - $ref: '#/components/parameters/next'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: List of corresponding cases
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Case'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Cases
      summary: Create a case
      operationId: createCase
      security:
        - bearerAuth: []
      requestBody:
        description: 'Payload object used to create a case'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaseBody'
        required: true
      responses:
        '200':
          description: The case corresponding to the provided payload
          content:
            application/json:
              schema:
                type: object
                required:
                  - case
                properties:
                  case:
                    $ref: '#/components/schemas/CaseDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /cases/{caseId}:
    get:
      tags:
        - Cases
      summary: Get a case by id
      operationId: getCase
      security:
        - bearerAuth: []
      parameters:
        - name: caseId
          description: ID of the case that needs to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The case corresponding to the provided `caseId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Cases
      summary: Update a case
      operationId: updateCase
      security:
        - bearerAuth: []
      parameters:
        - name: caseId
          description: ID of the case that needs to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated case object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaseBody'
        required: true
      responses:
        '200':
          description: The updated case corresponding to the provided `caseId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - case
                properties:
                  case:
                    $ref: '#/components/schemas/CaseDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /cases/{caseId}/decisions:
    post:
      tags:
        - Cases
      summary: Add decisions to a case
      operationId: addDecisionsToCase
      security:
        - bearerAuth: []
      parameters:
        - name: caseId
          description: ID of the case that needs to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Decision ids to add to case'
        content:
          application/json:
            schema:
              type: object
              required:
                - decision_ids
              properties:
                decision_ids:
                  type: array
                  description: List of decision IDs to add to the case
                  items:
                    type: string
                    format: uuid
        required: true
      responses:
        '200':
          description: The updated case corresponding to the provided `caseId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - case
                properties:
                  case:
                    $ref: '#/components/schemas/CaseDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /cases/{caseId}/comments:
    post:
      tags:
        - Cases
      summary: Add a comment to a case
      operationId: addCommentToCase
      security:
        - bearerAuth: []
      parameters:
        - name: caseId
          description: ID of the case that needs to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Comment to add to the case'
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: The updated case corresponding to the provided `caseId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - case
                properties:
                  case:
                    $ref: '#/components/schemas/CaseDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /cases/{caseId}/case_tags:
    post:
      tags:
        - Cases
      summary: Define tags for a case
      operationId: updateTagsForCase
      security:
        - bearerAuth: []
      parameters:
        - name: caseId
          description: ID of the case that needs to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tag_ids
              properties:
                tag_ids:
                  type: array
                  description: List of all tag IDs for the case
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: The updated case corresponding to the provided `caseId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - case
                properties:
                  case:
                    $ref: '#/components/schemas/CaseDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /cases/files/${caseFileId}/download_link:
    get:
      tags:
        - Cases
      summary: Download a case file
      operationId: downloadCaseFile
      security:
        - bearerAuth: []
      parameters:
        - name: caseFileId
          description: ID of the case file that needs to be downloaded
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Signed url to download the case file's content
          content:
            application/json:
              schema:
                type: object
                required:
                  - url
                properties:
                  url:
                    type: string
                    format: uri
                    description: Signed url to download the case file's content
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /tags:
    get:
      tags:
        - Tags
      summary: List tags
      operationId: listTags
      security:
        - bearerAuth: []
      parameters:
        - name: withCaseCount
          description: whether the result should include the cases count
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of corresponding tags
          content:
            application/json:
              schema:
                type: object
                required:
                  - tags
                properties:
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Tags
      summary: Create a tag
      operationId: createTag
      security:
        - bearerAuth: []
      requestBody:
        description: Tag object that needs to be added to the database
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                color:
                  type: string
        required: true
      responses:
        '200':
          description: Created tag
          content:
            application/json:
              schema:
                type: object
                required:
                  - tag
                properties:
                  tag:
                    $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /tags/{tagId}:
    patch:
      tags:
        - Tags
      summary: Update a tag
      operationId: updateTag
      security:
        - bearerAuth: []
      parameters:
        - name: tagId
          description: ID of the tag that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated tag object'
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                color:
                  type: string
        required: true
      responses:
        '200':
          description: The updated tag corresponding to the provided `tagId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - tag
                properties:
                  tag:
                    $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    delete:
      tags:
        - Tags
      summary: Delete a tag
      operationId: deleteTag
      security:
        - bearerAuth: []
      parameters:
        - name: tagId
          description: ID of the tag that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The deleted tag corresponding to the provided `tagId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /scheduled-executions:
    get:
      tags:
        - ScheduledExecutions
      summary: List Scheduled Executions
      operationId: listScheduledExecutions
      security:
        - bearerAuth: []
      parameters:
        - name: scenario_id
          description: ID of the scenario used to filter the list
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of Scheduled Executions of the organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - scheduled_executions
                properties:
                  scheduled_executions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScheduledExecution'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  /decisions/{decisionId}:
    get:
      tags:
        - Decisions
      summary: Get a decision by id
      operationId: getDecision
      security:
        - bearerAuth: []
      parameters:
        - name: decisionId
          description: ID of the decision that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The decision corresponding to the provided `decisionId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecisionDetailDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /ingestion/{objectType}:
    post:
      tags:
        - Ingestions
      summary: Ingest some data
      operationId: createIngestion
      security:
        - bearerAuth: []
      parameters:
        - name: objectType
          description: Type of the data that needs to be ingested
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'Data that needs to be added to the database. The `objectType` is used to determine the type of the data'
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '201':
          description: Data created
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /ingestion/{objectType}/upload-logs:
    get:
      tags:
        - Ingestions
      summary: Get ingestion upload logs for an object type
      operationId: getIngestionUploadLogs
      security:
        - bearerAuth: []
      parameters:
        - name: objectType
          description: Type of the data that needs to be ingested
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ingestion upload logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadLog'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /custom-lists:
    get:
      tags:
        - CustomList
      summary: List custom list
      operationId: listCustomLists
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of corresponding custom lists
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_lists
                properties:
                  custom_lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - CustomList
      summary: Create a custom list
      operationId: createCustomList
      security:
        - bearerAuth: []
      requestBody:
        description: Custom list object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomListBody'
        required: true
      responses:
        '200':
          description: Created custom list
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_list
                properties:
                  custom_list:
                    $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /custom-lists/{customListId}:
    get:
      tags:
        - CustomList
      summary: Get values of the corresponding custom list
      operationId: getCustomList
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Values from the custom list corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_list
                properties:
                  custom_list:
                    $ref: '#/components/schemas/CustomListWithValues'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - CustomList
      summary: Update a custom list
      operationId: updateCustomList
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomListBody'
        required: true
      responses:
        '200':
          description: The updated custom list corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - CustomList
      summary: Delete a custom list
      operationId: deleteCustomList
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The deleted custom list corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /custom-lists/{customListId}/values:
    post:
      tags:
        - CustomList
      summary: Create a custom list value
      operationId: createCustomListValue
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list on which the value will be added
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Custom list value object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomListValueBody'
        required: true
      responses:
        '200':
          description: Created custom list Value
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_list_value
                properties:
                  custom_list_value:
                    $ref: '#/components/schemas/CustomListValue'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
        '422':
          $ref: '#/components/responses/422'
  /custom-lists/{customListId}/values/{customListValueId}:
    delete:
      tags:
        - CustomList
      summary: Delete a custom list value
      operationId: deleteCustomListValue
      security:
        - bearerAuth: []
      parameters:
        - name: customListId
          description: ID of the custom list associated with the deleted value
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: customListValueId
          description: ID of the custom value
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The deleted custom list value corresponding to the provided `customListId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListValue'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenarios:
    get:
      tags:
        - Scenarios
      summary: List scenarios
      operationId: listScenarios
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of corresponding scenario
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Scenarios
      summary: Create a scenario
      operationId: createScenario
      security:
        - bearerAuth: []
      requestBody:
        description: 'Scenario object that needs to be added to the database'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioCreateInputDto'
        required: true
      responses:
        '200':
          description: Created scenario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /scenarios/{scenarioId}:
    get:
      tags:
        - Scenarios
      summary: Get a scenario by id
      operationId: getScenario
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario corresponding to the provided `scenarioId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Scenarios
      summary: Update a scenario
      operationId: updateScenario
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioUpdateInputDto'
        required: true
      responses:
        '200':
          description: The updated scenario corresponding to the provided `scenarioId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations:
    get:
      tags:
        - Scenario Iterations
      summary: List iterations
      description: List iterations corresponding to filters
      operationId: listScenarioIterations
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario returned iterations should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scenario iterations corresponding to filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioIterationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Iterations
      summary: Create a scenario iteration
      description: Create a scenario iteration for a given `scenarioId`
      operationId: createScenarioIteration
      security:
        - bearerAuth: []
      requestBody:
        description: 'Scenario iteration object to create and linked `scenarioId`'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenarioIterationBody'
        required: true
      responses:
        '200':
          description: The created scenario iteration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations/{scenarioIterationId}:
    get:
      tags:
        - Scenario Iterations
      summary: Get a scenario iteration by id
      operationId: getScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario iteration corresponding to the provided `scenarioIterationId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Iterations
      summary: Create draft from a scenario iteration
      operationId: createDraftFromScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration that need to be used as base for the draft
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The create draft scenario iteration corresponding to the scenario iteration provided `scenarioIterationId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Scenario Iterations
      summary: Update a scenario iteration
      operationId: updateScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario iteration object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScenarioIterationBody'
        required: true
      responses:
        '200':
          description: The updated scenario iteration corresponding to the provided `scenarioIterationId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - iteration
                properties:
                  iteration:
                    $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations/{scenarioIterationId}/schedule-execution:
    post:
      tags:
        - Scenario Iterations
      summary: Schedule a scenario execution
      operationId: scheduleScenarioExecution
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration that need to be scheduled
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Data created
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations/{scenarioIterationId}/validate:
    post:
      tags:
        - Scenario Iterations
      summary: Validate a scenario iteration by id. A rule or trigger can be override in the body
      operationId: validateScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Trigger or rule to validate'
        content:
          application/json:
            schema:
              type: object
              required:
                - trigger_or_rule
                - rule_id
              properties:
                trigger_or_rule:
                  $ref: '#/components/schemas/NodeDto'
                rule_id:
                  type: string
                  nullable: true
                  format: uuid
      responses:
        '200':
          description: The scenario validation of the sent iteration
          content:
            application/json:
              schema:
                type: object
                required:
                  - scenario_validation
                properties:
                  scenario_validation:
                    $ref: '#/components/schemas/ScenarioValidationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iterations/{scenarioIterationId}/commit:
    post:
      tags:
        - Scenario Iterations
      summary: Commit a scenario iteration
      operationId: commitScenarioIteration
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The committed scenario iteration
          content:
            application/json:
              schema:
                type: object
                required:
                  - iteration
                properties:
                  iteration:
                    $ref: '#/components/schemas/ScenarioIterationWithBodyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iteration-rules:
    get:
      tags:
        - Scenario Iteration Rules
      summary: List rules
      description: List rules using provided filters
      operationId: listScenarioIterationRules
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioIterationId
          description: ID of the scenario iteration returned rules should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scenario iterations rules corresponding to filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Iteration Rules
      summary: Create a scenario iteration rule
      description: Create a scenario iteration rule for a given `scenarioIterationId`
      operationId: createScenarioIterationRule
      security:
        - bearerAuth: []
      requestBody:
        description: 'Scenario iteration rule object to create and linked `scenarioIterationId`'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenarioIterationRuleBodyDto'
        required: true
      responses:
        '200':
          description: The created scenario iteration rule
          content:
            application/json:
              schema:
                type: object
                required:
                  - rule
                properties:
                  rule:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-iteration-rules/{ruleId}:
    get:
      tags:
        - Scenario Iteration Rules
      summary: Get a scenario iteration rule by id
      operationId: getScenarioIterationRule
      security:
        - bearerAuth: []
      parameters:
        - name: ruleId
          description: ID of the rule that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario iteration rule corresponding to the provided `ruleId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - rule
                properties:
                  rule:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Scenario Iteration Rules
      summary: Update a scenario iteration rule
      operationId: updateScenarioIterationRule
      security:
        - bearerAuth: []
      parameters:
        - name: ruleId
          description: ID of the rule that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Updated scenario iteration rule object'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScenarioIterationRuleBodyDto'
        required: true
      responses:
        '200':
          description: The updated scenario iteration rule corresponding to the provided `ruleId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - rule
                properties:
                  rule:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Scenario Iteration Rules
      summary: Delete a scenario iteration rule
      operationId: deleteScenarioIterationRule
      security:
        - bearerAuth: []
      parameters:
        - name: ruleId
          description: ID of the rule that need to be delete
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The rule has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-publications:
    get:
      tags:
        - Scenario Publications
      summary: List scenario publications
      description: List scenario publications using provided filters
      operationId: listScenarioPublications
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario returned publications should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: scenarioIterationId
          description: ID of the scenario iteration returned publications should be linked to
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: publicationAction
          description: publication action to return
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PublicationAction'
      responses:
        '200':
          description: Scenario publications corresponding to filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioPublication'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Publications
      summary: Create a scenario publication
      operationId: createScenarioPublication
      security:
        - bearerAuth: []
      requestBody:
        description: 'Describe the scenario publication action'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenarioPublicationBody'
        required: true
      responses:
        '200':
          description: The list of created scenario publication actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioPublication'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-publications/preparation:
    get:
      tags:
        - Scenario Publications
      summary: Get scenario publication preparation status
      operationId: getScenarioPublicationPreparationStatus
      security:
        - bearerAuth: []
      parameters:
        - name: scenario_iteration_id
          description: ID of the scenario iteration to check the preparation status
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario publication preparation status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioPublicationStatusDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Scenario Publications
      summary: Start scenario publication preparation
      operationId: startScenarioPublicationPreparation
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - scenario_iteration_id
              properties:
                scenario_iteration_id:
                  type: string
                  format: uuid
        required: true
      responses:
        '202':
          description: The scenario publication preparation has started
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /scenario-publications/{scenarioPublicationId}:
    get:
      tags:
        - Scenario Publications
      summary: Get a scenario publication by id
      operationId: getScenarioPublication
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioPublicationId
          description: ID of the scenario publication that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The scenario publication corresponding to the provided `scenarioPublicationId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioPublication'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model:
    get:
      tags:
        - Data Model
      summary: Get the data model associated with the current organization (present in the JWT)
      operationId: getDataModel
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The data model from the organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - data_model
                properties:
                  data_model:
                    $ref: '#/components/schemas/DataModelDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model/tables:
    post:
      tags:
        - Data Model
      summary: Create a new table on the data model
      operationId: postDataModelTable
      requestBody:
        description: 'Describe the table to create'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableBody'
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Empty response body
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model/tables/{tableId}:
    patch:
      tags:
        - Data Model
      summary: Update data model table
      operationId: patchDataModelTable
      parameters:
        - name: tableId
          description: ID of the table to update
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Describe the modifications to make to the table'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableBody'
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Empty response body
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model/tables/{tableId}/fields:
    post:
      tags:
        - Data Model
      summary: Create a new field on a table from the data model
      operationId: postDataModelTableField
      parameters:
        - name: tableId
          description: ID of the table in which to create the field
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Describe the content of the field to create'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableFieldDto'
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Empty response body
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model/fields/{fieldId}:
    patch:
      tags:
        - Data Model
      summary: Update data model field
      operationId: patchDataModelField
      parameters:
        - name: fieldId
          description: ID of the field to update
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Describe the modifications to make to the field'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableFieldDto'
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Empty response body
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model/links:
    post:
      tags:
        - Data Model
      summary: Create a new link on a table from the data model
      operationId: postDataModelTableLink
      requestBody:
        description: 'Describe the link to create'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableLinkBody'
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Empty response body
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /data-model/openapi:
    get:
      tags:
        - Data Model
      summary: Get the OpenAPI specification of the client specific API for data ingestion and decision making
      operationId: getDataModelOpenApi
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The OpenAPI specification of the client specific API for data ingestion and decision making
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAPISpec'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /data-model/pivots:
    get:
      tags:
        - Data Model
      summary: Get the pivots associated with the current organization (can be filtered by table_id)
      operationId: listDataModelPivots
      security:
        - bearerAuth: []
      parameters:
        - name: table_id
          description: ID of the table to get the pivots from
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The pivots corresponding to the current organization (and table_id if provided)
          content:
            application/json:
              schema:
                type: object
                properties:
                  pivots:
                    type: array
                    items:
                      $ref: '#/components/schemas/PivotDto'
                required:
                  - pivots
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Data Model
      summary: Create a pivot
      operationId: createDataModelPivot
      security:
        - bearerAuth: []
      requestBody:
        description: 'Describe the pivot to create'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePivotInputDto'
        required: true
      responses:
        '200':
          description: The created pivot
          content:
            application/json:
              schema:
                type: object
                properties:
                  pivot:
                    $ref: '#/components/schemas/PivotDto'
                required:
                  - pivot
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /analytics:
    get:
      tags:
        - Analytics
      summary: List analytics associated with the current organization (present in the JWT)
      operationId: listAnalytics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The analytics corresponding to the current organization (present in the JWT)
          content:
            application/json:
              schema:
                type: object
                required:
                  - analytics
                properties:
                  analytics:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnalyticsDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /apikeys:
    get:
      tags:
        - ApiKeys
      summary: List api keys associated with the current organization (present in the JWT)
      operationId: listApiKeys
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The apikeys corresponding to the current organization (present in the JWT)
          content:
            application/json:
              schema:
                type: object
                required:
                  - api_keys
                properties:
                  api_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKeyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - ApiKeys
      summary: Create an api key
      operationId: createApiKey
      security:
        - bearerAuth: []
      requestBody:
        description: 'Describe the api key to create'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyBody'
        required: true
      responses:
        '200':
          description: The created api key
          content:
            application/json:
              schema:
                type: object
                required:
                  - api_key
                properties:
                  api_key:
                    $ref: '#/components/schemas/CreatedApiKeyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /apikeys/{apiKeyId}:
    delete:
      tags:
        - ApiKeys
      summary: Delete an api key
      operationId: deleteApiKey
      security:
        - bearerAuth: []
      parameters:
        - name: apiKeyId
          description: ID of the api key that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The api key has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /users:
    get:
      tags:
        - Admin
        - Users
      summary: List all users present in the database
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The list of users present in the database
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Admin
        - Users
      summary: Create a user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        description: Describe the user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '200':
          description: The created user
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /users/{userId}:
    get:
      tags:
        - Admin
        - Users
      summary: Get a user by id
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: ID of the user that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user corresponding to the provided `userId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Admin
        - Users
      summary: Delete a user by id
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: ID of the user that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The user has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Admin
        - Users
      summary: Update a user
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: ID of the user that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Describe the user to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /organizations:
    get:
      tags:
        - Admin
        - Organizations
      summary: List all organizations present in the database
      operationId: listOrganizations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The list of organizations present in the database
          content:
            application/json:
              schema:
                type: object
                required:
                  - organizations
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Admin
        - Organizations
      summary: Create an organization
      operationId: createOrganization
      security:
        - bearerAuth: []
      requestBody:
        description: Describe the organization to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationBodyDto'
        required: true
      responses:
        '200':
          description: The created organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - organization
                properties:
                  organization:
                    $ref: '#/components/schemas/OrganizationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /organizations/{organizationId}:
    get:
      tags:
        - Admin
        - Organizations
      summary: Get an organization by id
      operationId: getOrganization
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization that need to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The organization corresponding to the provided `organizationId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - organization
                properties:
                  organization:
                    $ref: '#/components/schemas/OrganizationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Admin
        - Organizations
      summary: Update an organization by id
      operationId: updateOrganization
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization that need to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Describe the organization to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationBodyDto'
        required: true
      responses:
        '200':
          description: The updated organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - organization
                properties:
                  organization:
                    $ref: '#/components/schemas/OrganizationDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Admin
        - Organizations
      summary: Delete an organization by id
      operationId: deleteOrganization
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization that need to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The organization has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /organizations/{organizationId}/users:
    get:
      tags:
        - Admin
        - Organizations
      summary: List all users of an organization
      operationId: listOrganizationUsers
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          description: ID of the organization
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of users of the organization
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /editor/{scenarioId}/identifiers:
    get:
      tags:
        - Editor
      summary: List all identifiers
      operationId: listIdentifiers
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of identifiers
          content:
            application/json:
              schema:
                type: object
                required:
                  - database_accessors
                  - payload_accessors
                properties:
                  database_accessors:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeDto'
                  payload_accessors:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /editor/{scenarioId}/operators:
    get:
      tags:
        - Editor
      summary: List all operators
      operationId: listOperators
      security:
        - bearerAuth: []
      parameters:
        - name: scenarioId
          description: ID of the scenario
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of operators
          content:
            application/json:
              schema:
                type: object
                required:
                  - operators_accessors
                properties:
                  operators_accessors:
                    type: array
                    items:
                      $ref: '#/components/schemas/FuncAttributes'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /inboxes:
    get:
      tags:
        - Inboxes
      summary: List all inboxes
      operationId: listInboxes
      security:
        - bearerAuth: []
      parameters:
        - name: withCaseCount
          description: whether the result should include the cases count
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: The list of inboxes
          content:
            application/json:
              schema:
                type: object
                required:
                  - inboxes
                properties:
                  inboxes:
                    type: array
                    items:
                      $ref: '#/components/schemas/InboxDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Inboxes
      summary: Create an inbox
      operationId: createInbox
      security:
        - bearerAuth: []
      requestBody:
        description: Describe the inbox to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxBodyDto'
        required: true
      responses:
        '200':
          description: The created inbox
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox
                properties:
                  inbox:
                    $ref: '#/components/schemas/InboxDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /inboxes/{inboxId}:
    get:
      tags:
        - Inboxes
      summary: Get an inbox by id
      operationId: getInbox
      security:
        - bearerAuth: []
      parameters:
        - name: inboxId
          description: ID of the inbox that needs to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The inbox corresponding to the provided `inboxId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox
                properties:
                  inbox:
                    $ref: '#/components/schemas/InboxDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Inboxes
      summary: Update an inbox
      operationId: updateInbox
      security:
        - bearerAuth: []
      parameters:
        - name: inboxId
          description: ID of the inbox that needs to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Describe the fields to update
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
        required: true
      responses:
        '200':
          description: The updated inbox
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox
                properties:
                  inbox:
                    $ref: '#/components/schemas/InboxDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    delete:
      tags:
        - Inboxes
      summary: Delete an inbox
      operationId: deleteInbox
      security:
        - bearerAuth: []
      parameters:
        - name: inboxId
          description: ID of the inbox that needs to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The inbox has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /inboxes/{inboxId}/users:
    get:
      tags:
        - Inboxes
      summary: List all users of an inbox
      operationId: listInboxUsers
      security:
        - bearerAuth: []
      parameters:
        - name: inboxId
          description: ID of the inbox
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of users of the inbox
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox_users
                properties:
                  inbox_users:
                    type: array
                    items:
                      $ref: '#/components/schemas/InboxUserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - Inboxes
      summary: Add a user to an inbox
      operationId: addInboxUser
      security:
        - bearerAuth: []
      parameters:
        - name: inboxId
          description: ID of the inbox
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Describe the user to add to the inbox
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddInboxUserBodyDto'
        required: true
      responses:
        '200':
          description: The list of users of the inbox
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox_user
                properties:
                  inbox_user:
                    $ref: '#/components/schemas/InboxUserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /inbox_users:
    get:
      tags:
        - Inboxes
      summary: List all inbox users
      operationId: listAllInboxUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The list of all inbox users
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox_users
                properties:
                  inbox_users:
                    type: array
                    items:
                      $ref: '#/components/schemas/InboxUserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /inbox_users/{inboxUserId}:
    get:
      tags:
        - Inboxes
      summary: Get an inbox user by id
      operationId: getInboxUser
      security:
        - bearerAuth: []
      parameters:
        - name: inboxUserId
          description: ID of the inbox user that needs to be fetched
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The inbox user corresponding to the provided `inboxUserId`
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox_user
                properties:
                  inbox_user:
                    $ref: '#/components/schemas/InboxUserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    patch:
      tags:
        - Inboxes
      summary: Update an inbox user
      operationId: updateInboxUser
      security:
        - bearerAuth: []
      parameters:
        - name: inboxUserId
          description: ID of the inbox user that needs to be updated
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Describe the fields to update
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  $ref: '#/components/schemas/InboxUserRole'
        required: true
      responses:
        '200':
          description: The updated inbox user
          content:
            application/json:
              schema:
                type: object
                required:
                  - inbox_user
                properties:
                  inbox_user:
                    $ref: '#/components/schemas/InboxUserDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    delete:
      tags:
        - Inboxes
      summary: Delete an inbox user
      operationId: deleteInboxUser
      security:
        - bearerAuth: []
      parameters:
        - name: inboxUserId
          description: ID of the inbox user that needs to be deleted
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The inbox user has been deleted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /transfers:
    get:
      tags:
        - Transfers
      summary: List transfers
      description: List transfers corresponding to filters
      operationId: listTransfers
      security:
        - bearerAuth: []
      parameters:
        - name: transfer_id
          description: ID of the transfer in the Partner database (do not confuse with the ID generated by Marble database)
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transfers corresponding to filters
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfers:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransferDto'
                required:
                  - transfers
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /transfers/{transferId}:
    get:
      tags:
        - Transfers
      summary: Get a transfer by id
      description: Get a transfer by Marble database ID (not the Partner database ID)
      operationId: getTransfer
      security:
        - bearerAuth: []
      parameters:
        - name: transferId
          description: ID of the transfer in the Marble database (not the Partner database)
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transfer corresponding to the provided `transferId`
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfer:
                    $ref: '#/components/schemas/TransferDto'
                required:
                  - transfer
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Transfers
      summary: Update a transfer
      description: Update a transfer by Marble database ID (not the Partner database ID)
      operationId: updateTransfer
      security:
        - bearerAuth: []
      parameters:
        - name: transferId
          description: ID of the transfer in the Marble database (not the Partner database)
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Describe the modifications to make to the transfer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferUpdateBodyDto'
        required: true
      responses:
        '200':
          description: Transfer corresponding to the provided `transferId`
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfer:
                    $ref: '#/components/schemas/TransferDto'
                required:
                  - transfer
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
components:
  parameters:
    start_date:
      in: query
      name: start_date
      description: start date used to filter the list
      required: false
      schema:
        type: string
        format: date-time
    end_date:
      in: query
      name: end_date
      description: end date used to filter the list
      required: false
      schema:
        type: string
        format: date-time
    offset_id:
      in: query
      name: offset_id
      description: the item from which to paginate
      required: false
      schema:
        type: string
        format: uuid
    next:
      in: query
      name: next
      description: Next page
      required: false
      schema:
        type: boolean
    previous:
      in: query
      name: previous
      description: Previous page
      required: false
      schema:
        type: boolean
    limit:
      in: query
      name: limit
      description: the number of items to fetch
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
    order:
      in: query
      name: order
      description: the order of the items to fetch
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
  schemas:
    TransferUpdateBodyDto:
      type: object
      properties:
        status:
          type: string
          enum: [neutral, suspected_fraud, confirmed_fraud]
      required:
        - status
    TransferDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        last_scored_at:
          type: string
          format: date-time
          nullable: true
        score:
          type: number
          nullable: true
        transfer_data:
          $ref: '#/components/schemas/TransferDataDto'
      required:
        - id
        - transfer_data
    TransferDataDto:
      type: object
      properties:
        beneficiary_bic:
          type: string
        beneficiary_iban:
          type: string
        beneficiary_name:
          type: string
        created_at:
          type: string
          format: date-time
        currency:
          type: string
        label:
          type: string
        sender_account_id:
          type: string
        sender_bic:
          type: string
        sender_device:
          type: string
        sender_ip:
          type: string
        status:
          type: string
          enum: [neutral, suspected_fraud, confirmed_fraud]
        timezone:
          type: string
        transfer_id:
          type: string
        transfer_requested_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        value:
          type: number
      required:
        - beneficiary_bic
        - beneficiary_iban
        - beneficiary_name
        - created_at
        - currency
        - label
        - sender_account_id
        - sender_bic
        - sender_device
        - sender_ip
        - status
        - timezone
        - transfer_id
        - transfer_requested_at
        - updated_at
        - value
    OrganizationDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        export_scheduled_execution_s3:
          type: string
    CreateOrganizationBodyDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    UpdateOrganizationBodyDto:
      type: object
      properties:
        name:
          type: string
    UserDto:
      type: object
      required:
        - user_id
        - email
        - first_name
        - last_name
        - role
        - organization_id
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
        organization_id:
          type: string
          format: uuid
    CreateUser:
      type: object
      required:
        - email
        - role
        - organization_id
        - first_name
        - last_name
      properties:
        email:
          type: string
        role:
          type: string
        organization_id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
    UpdateUser:
      type: object
      required:
        - email
        - role
        - organization_id
        - first_name
        - last_name
      properties:
        email:
          type: string
        role:
          type: string
        organization_id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
    AnalyticsDto:
      type: object
      required:
        - embedding_type
        - signed_embedding_url
      properties:
        embedding_type:
          type: string
          enum: [global_dashboard, unknown_embedding_type]
        signed_embedding_url:
          type: string
          format: uri
    ApiKeyDto:
      type: object
      required:
        - id
        - description
        - organization_id
        - prefix
        - role
      properties:
        id:
          type: string
        description:
          type: string
        organization_id:
          type: string
          format: uuid
        prefix:
          type: string
          description: 3 first characters of the API key
        role:
          type: string
    CreateApiKeyBody:
      type: object
      required:
        - description
        - role
      properties:
        description:
          type: string
        role:
          type: string
    CreatedApiKeyDto:
      allOf:
        - $ref: '#/components/schemas/ApiKeyDto'
        - type: object
          required:
            - key
          properties:
            key:
              type: string
    LinkToSingleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        parent_table_name:
          type: string
        parent_table_id:
          type: string
          format: uuid
        parent_field_name:
          type: string
        parent_field_id:
          type: string
          format: uuid
        child_table_name:
          type: string
        child_table_id:
          type: string
          format: uuid
        child_field_name:
          type: string
        child_field_id:
          type: string
          format: uuid
      required:
        - id
        - parent_table_name
        - parent_table_id
        - parent_field_name
        - parent_field_id
        - child_table_name
        - child_table_id
        - child_field_name
        - child_field_id
    FieldDto:
      type: object
      properties:
        id:
          type: string
        data_type:
          type: string
          enum: [Bool, Int, Float, String, Timestamp, unknown]
        description:
          type: string
        is_enum:
          type: boolean
        name:
          type: string
        nullable:
          type: boolean
        table_id:
          type: string
          format: uuid
        values:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        unicity_constraint:
          type: string
          enum:
            [
              no_unicity_constraint,
              pending_unique_constraint,
              active_unique_constraint,
            ]
      required:
        - id
        - data_type
        - description
        - is_enum
        - name
        - nullable
        - table_id
        - unicity_constraint
    TableDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        fields:
          type: object
          additionalProperties:
            type: object
            $ref: '#/components/schemas/FieldDto'
        links_to_single:
          type: object
          additionalProperties:
            type: object
            $ref: '#/components/schemas/LinkToSingleDto'
      required:
        - id
        - name
        - description
        - fields
    DataModelDto:
      type: object
      properties:
        tables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TableDto'
      required:
        - tables
    CreateTableBody:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    UpdateTableBody:
      type: object
      properties:
        description:
          type: string
    CreateTableFieldDto:
      type: object
      required:
        - name
        - type
        - nullable
        - description
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [Bool, Int, Float, String, Timestamp]
        nullable:
          type: boolean
        is_enum:
          type: boolean
        is_unique:
          type: boolean
    UpdateTableFieldDto:
      type: object
      properties:
        description:
          type: string
        is_enum:
          type: boolean
        is_unique:
          type: boolean
    CreateTableLinkBody:
      type: object
      required:
        - name
        - parent_table_id
        - parent_field_id
        - child_table_id
        - child_field_id
      properties:
        name:
          type: string
        parent_table_id:
          type: string
        parent_field_id:
          type: string
        child_table_id:
          type: string
        child_field_id:
          type: string
    OpenAPISpec:
      type: object
      required:
        - openapi
        - tags
        - paths
      properties:
        info:
          type: object
        openapi:
          type: string
        tags:
          type: array
          items:
            type: object
        paths:
          type: object
        components:
          type: object
          properties:
            schemas:
              type: object
            securitySchemes:
              type: object
    PivotDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        base_table:
          type: string
        base_table_id:
          type: string
          format: uuid
        pivot_table:
          type: string
        pivot_table_id:
          type: string
          format: uuid
        field:
          type: string
        field_id:
          type: string
          format: uuid
        path_links:
          type: array
          items:
            type: string
        path_link_ids:
          type: array
          items:
            type: string
            format: uuid
      required:
        - id
        - created_at
        - base_table
        - base_table_id
        - pivot_table
        - pivot_table_id
        - field
        - field_id
        - path_links
        - path_link_ids
    PivotValueDto:
      type: object
      properties:
        pivot_id:
          type: string
          format: uuid
          nullable: true
        pivot_value:
          type: string
          nullable: true
      required:
        - pivot_id
        - pivot_value
    CreatePivotInputDto:
      type: object
      properties:
        base_table_id:
          type: string
          format: uuid
        field_id:
          type: string
          format: uuid
        path_link_ids:
          type: array
          items:
            type: string
            format: uuid
      required:
        - base_table_id
    Token:
      type: object
      required:
        - access_token
        - token_type
        - expires_at
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_at:
          type: string
          format: date-time
    CredentialsDto:
      type: object
      required:
        - credentials
      properties:
        credentials:
          type: object
          required:
            - organization_id
            - role
            - actor_identity
            - permissions
          properties:
            organization_id:
              type: string
            partner_id:
              type: string
            role:
              type: string
            actor_identity:
              type: object
              properties:
                user_id:
                  type: string
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                api_key_name:
                  type: string
            permissions:
              type: array
              items:
                type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
    Outcome:
      type: string
      enum: ['approve', 'review', 'decline', 'null', 'unknown']
    RuleExecutionDto:
      type: object
      required:
        - description
        - name
        - result
        - rule_id
        - score_modifier
      properties:
        error:
          $ref: '#/components/schemas/Error'
        description:
          type: string
        name:
          type: string
        result:
          type: boolean
        rule_id:
          type: string
          format: uuid
        score_modifier:
          type: integer
        rule_evaluation:
          $ref: '#/components/schemas/NodeEvaluationDto'
    DecisionDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        case:
          $ref: '#/components/schemas/Case'
        created_at:
          type: string
          format: date-time
        error:
          $ref: '#/components/schemas/Error'
        outcome:
          $ref: '#/components/schemas/Outcome'
        pivot_values:
          type: array
          items:
            $ref: '#/components/schemas/PivotValueDto'
        scenario:
          type: object
          properties:
            id:
              type: string
              format: uuid
            description:
              type: string
            name:
              type: string
            scenario_iteration_id:
              type: string
              format: uuid
            version:
              type: integer
          required:
            - id
            - description
            - name
            - scenario_iteration_id
            - version
        score:
          type: integer
        trigger_object:
          additionalProperties: true
        trigger_object_type:
          type: string
      required:
        - id
        - created_at
        - outcome
        - pivot_values
        - scenario
        - score
        - trigger_object
        - trigger_object_type
    DecisionDetailDto:
      allOf:
        - $ref: '#/components/schemas/DecisionDto'
        - type: object
          required:
            - rules
          properties:
            rules:
              type: array
              items:
                $ref: '#/components/schemas/RuleExecutionDto'
    CaseStatus:
      type: string
      enum: ['open', 'investigating', 'discarded', 'resolved']
    Case:
      type: object
      required:
        - id
        - created_at
        - decisions_count
        - name
        - status
        - inbox_id
        - contributors
        - tags
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        decisions_count:
          type: number
        name:
          type: string
        status:
          $ref: '#/components/schemas/CaseStatus'
        inbox_id:
          type: string
          format: uuid
        contributors:
          type: array
          items:
            $ref: '#/components/schemas/CaseContributor'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/CaseTag'
    CaseDetailDto:
      allOf:
        - $ref: '#/components/schemas/Case'
        - type: object
          required:
            - decisions
            - events
            - files
          properties:
            decisions:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  created_at:
                    type: string
                    format: date-time
                  trigger_object:
                    additionalProperties: true
                  trigger_object_type:
                    type: string
                  outcome:
                    $ref: '#/components/schemas/Outcome'
                  pivot_values:
                    type: array
                    items:
                      $ref: '#/components/schemas/PivotValueDto'
                  scenario:
                    type: object
                    required:
                      - id
                      - name
                      - description
                      - scenario_iteration_id
                      - version
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      description:
                        type: string
                      scenario_iteration_id:
                        type: string
                        format: uuid
                      version:
                        type: integer
                  score:
                    type: integer
                  error:
                    $ref: '#/components/schemas/Error'
                required:
                  - id
                  - created_at
                  - trigger_object
                  - trigger_object_type
                  - outcome
                  - pivot_values
                  - scenario
                  - score
            events:
              type: array
              items:
                $ref: '#/components/schemas/CaseEventDto'
            files:
              type: array
              items:
                $ref: '#/components/schemas/CaseFile'
    CaseEventDto:
      type: object
      discriminator:
        propertyName: event_type
        mapping:
          case_created: '#/components/schemas/CaseCreatedEvent'
          status_updated: '#/components/schemas/CaseStatusUpdatedEvent'
          decision_added: '#/components/schemas/DecisionAddedEvent'
          comment_added: '#/components/schemas/CommentAddedEvent'
          name_updated: '#/components/schemas/NameUpdatedEvent'
          tags_updated: '#/components/schemas/CaseTagsUpdatedEventDto'
          file_added: '#/components/schemas/FileAddedEvent'
          inbox_changed: '#/components/schemas/InboxChangedEvent'
      required:
        - id
        - case_id
        - created_at
        - event_type
      properties:
        id:
          type: string
          format: uuid
        case_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        event_type:
          type: string
    CaseFile:
      type: object
      required:
        - id
        - case_id
        - created_at
        - file_name
      properties:
        id:
          type: string
          format: uuid
        case_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        file_name:
          type: string
    CaseTag:
      type: object
      required:
        - id
        - case_id
        - tag_id
        - created_at
      properties:
        id:
          type: string
          format: uuid
        case_id:
          type: string
          format: uuid
        tag_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
    Tag:
      type: object
      required:
        - id
        - name
        - color
        - organization_id
        - created_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
        organization_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        cases_count:
          type: number
    CaseContributor:
      type: object
      required:
        - id
        - case_id
        - user_id
        - created_at
      properties:
        id:
          type: string
          format: uuid
        case_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
    CaseCreatedEvent:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          properties:
            user_id:
              type: string
              format: uuid
    CaseStatusUpdatedEvent:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          required:
            - new_value
            - user_id
          properties:
            new_value:
              $ref: '#/components/schemas/CaseStatus'
            user_id:
              type: string
              format: uuid
    CaseTagsUpdatedEventDto:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          required:
            - new_value
            - user_id
          properties:
            new_value:
              type: string
              description: comma separated list of tag ids
            user_id:
              type: string
              format: uuid
    DecisionAddedEvent:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          properties:
            user_id:
              type: string
              format: uuid
    CommentAddedEvent:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          required:
            - additional_note
            - user_id
          properties:
            additional_note:
              type: string
            user_id:
              type: string
              format: uuid
    NameUpdatedEvent:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          required:
            - new_value
            - user_id
          properties:
            new_value:
              type: string
            user_id:
              type: string
              format: uuid
    FileAddedEvent:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          required:
            - additional_note
            - user_id
          properties:
            additional_note:
              type: string
            user_id:
              type: string
              format: uuid
    InboxChangedEvent:
      allOf:
        - $ref: '#/components/schemas/CaseEventDto'
        - type: object
          required:
            - new_value
            - user_id
          properties:
            new_value:
              type: string
              format: uuid
            user_id:
              type: string
              format: uuid
    UpdateCaseBody:
      type: object
      properties:
        name:
          type: string
        inbox_id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/CaseStatus'
    CreateCaseBody:
      type: object
      required:
        - name
        - inbox_id
      properties:
        name:
          type: string
        inbox_id:
          type: string
          format: uuid
        decision_ids:
          type: array
          items:
            type: string
            format: uuid
    ScheduledExecution:
      type: object
      required:
        - finished_at
        - id
        - manual
        - number_of_created_decisions
        - scenario_id
        - scenario_iteration_id
        - scenario_name
        - scenario_trigger_object_type
        - started_at
        - status
      properties:
        finished_at:
          format: date-time
          nullable: true
          type: string
        id:
          format: uuid
          type: string
        manual:
          description: Whether the execution was manual or not
          type: boolean
        number_of_created_decisions:
          type: number
        scenario_id:
          format: uuid
          type: string
        scenario_iteration_id:
          format: uuid
          type: string
        scenario_name:
          type: string
        scenario_trigger_object_type:
          type: string
        started_at:
          type: string
        status:
          type: string
    CreateDecisionBody:
      type: object
      required:
        - scenario_id
        - trigger_object
        - object_type
      properties:
        scenario_id:
          type: string
          format: uuid
        trigger_object:
          type: object
        object_type:
          type: string
    CustomList:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CustomListValue:
      type: object
      required:
        - id
        - value
      properties:
        id:
          type: string
          format: uuid
        value:
          type: string
    CustomListWithValues:
      allOf:
        - $ref: '#/components/schemas/CustomList'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/CustomListValue'
    CreateCustomListBody:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    UpdateCustomListBody:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    CreateCustomListValueBody:
      type: object
      required:
        - value
      properties:
        value:
          type: string
    ScenarioDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        decision_to_case_inbox_id:
          type: string
          format: uuid
        decision_to_case_outcomes:
          type: array
          items:
            $ref: '#/components/schemas/Outcome'
        decision_to_case_workflow_type:
          type: string
          enum: ['DISABLED', 'CREATE_CASE', 'ADD_TO_CASE_IF_POSSIBLE']
        description:
          type: string
        liveVersionId:
          type: string
          format: uuid
        name:
          type: string
        organization_id:
          type: string
          format: uuid
        triggerObjectType:
          type: string
      required:
        - id
        - createdAt
        - decision_to_case_outcomes
        - decision_to_case_workflow_type
        - description
        - name
        - organization_id
        - triggerObjectType
    ScenarioCreateInputDto:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        triggerObjectType:
          type: string
      required:
        - description
        - name
        - triggerObjectType
    ScenarioUpdateInputDto:
      type: object
      properties:
        decision_to_case_inbox_id:
          type: string
          format: uuid
        decision_to_case_outcomes:
          type: array
          items:
            $ref: '#/components/schemas/Outcome'
        decision_to_case_workflow_type:
          type: string
          enum: ['DISABLED', 'CREATE_CASE', 'ADD_TO_CASE_IF_POSSIBLE']
        description:
          type: string
        name:
          type: string
    ScenarioIterationDto:
      type: object
      required:
        - id
        - scenarioId
        - version
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        scenarioId:
          type: string
          format: uuid
        version:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ScenarioIterationWithBodyDto:
      allOf:
        - $ref: '#/components/schemas/ScenarioIterationDto'
        - type: object
          required:
            - body
          properties:
            body:
              type: object
              required:
                - rules
              properties:
                trigger_condition_ast_expression:
                  nullable: true
                  allOf:
                    - $ref: '#/components/schemas/NodeDto'
                scoreReviewThreshold:
                  type: integer
                  minimum: 0
                scoreRejectThreshold:
                  type: integer
                  minimum: 0
                rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/ScenarioIterationRuleDto'
                schedule:
                  type: string
    CreateScenarioIterationBody:
      type: object
      required:
        - scenarioId
      properties:
        scenarioId:
          type: string
          format: uuid
        body:
          type: object
          properties:
            trigger_condition_ast_expression:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/NodeDto'
            scoreReviewThreshold:
              type: integer
              minimum: 0
            scoreRejectThreshold:
              type: integer
              minimum: 0
            rules:
              type: array
              items:
                $ref: '#/components/schemas/CreateScenarioIterationRuleBodyDto'
    UpdateScenarioIterationBody:
      type: object
      properties:
        body:
          type: object
          properties:
            trigger_condition_ast_expression:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/NodeDto'
            scoreReviewThreshold:
              type: integer
              minimum: 0
            scoreRejectThreshold:
              type: integer
              minimum: 0
            schedule:
              type: string
    ScenarioIterationRuleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        scenarioIterationId:
          type: string
          format: uuid
        displayOrder:
          type: integer
        name:
          type: string
        description:
          type: string
        rule_group:
          type: string
        formula_ast_expression:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/NodeDto'
        scoreModifier:
          type: integer
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - scenarioIterationId
        - displayOrder
        - name
        - description
        - rule_group
        - formula_ast_expression
        - scoreModifier
        - createdAt
    ScenarioValidationDto:
      type: object
      required:
        - trigger
        - rules
        - decision
      properties:
        trigger:
          type: object
          required:
            - errors
            - trigger_evaluation
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/ScenarioValidationErrorDto'
            trigger_evaluation:
              $ref: '#/components/schemas/NodeEvaluationDto'
        rules:
          type: object
          required:
            - errors
            - rules
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/ScenarioValidationErrorDto'
            rules:
              additionalProperties:
                type: object
                required:
                  - errors
                  - rule_evaluation
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScenarioValidationErrorDto'
                  rule_evaluation:
                    $ref: '#/components/schemas/NodeEvaluationDto'
        decision:
          type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/ScenarioValidationErrorDto'
    CreateScenarioIterationRuleBodyDto:
      type: object
      properties:
        scenarioIterationId:
          type: string
          format: uuid
        displayOrder:
          type: integer
        name:
          type: string
        description:
          type: string
        rule_group:
          type: string
        formula_ast_expression:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/NodeDto'
        scoreModifier:
          type: integer
      required:
        - scenarioIterationId
        - displayOrder
        - name
        - description
        - rule_group
        - formula_ast_expression
        - scoreModifier
    UpdateScenarioIterationRuleBodyDto:
      type: object
      properties:
        displayOrder:
          type: integer
        name:
          type: string
        description:
          type: string
        rule_group:
          type: string
        formula_ast_expression:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/NodeDto'
        scoreModifier:
          type: integer
    ScenarioPublicationStatusDto:
      type: object
      required:
        - preparation_status
        - preparation_service_status
      properties:
        preparation_status:
          type: string
          enum: ['required', 'ready_to_activate']
        preparation_service_status:
          type: string
          enum: ['available', 'occupied']
    ScenarioPublication:
      type: object
      required:
        - id
        - createdAt
        - scenarioIterationId
        - publicationAction
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        scenarioIterationId:
          type: string
          format: uuid
        publicationAction:
          $ref: '#/components/schemas/PublicationAction'
    CreateScenarioPublicationBody:
      type: object
      required:
        - scenarioIterationId
        - publicationAction
      properties:
        scenarioIterationId:
          type: string
          format: uuid
        publicationAction:
          $ref: '#/components/schemas/PublicationAction'
    PublicationAction:
      type: string
      enum: ['publish', 'unpublish']
    ConstantDto:
      nullable: true
      example: 'some constant value'
      oneOf:
        - type: string
        - type: number
        - type: boolean
        - type: array
          items:
            $ref: '#/components/schemas/ConstantDto'
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/ConstantDto'
    NodeDto:
      type: object
      properties:
        name:
          type: string
          example: '>'
        constant:
          $ref: '#/components/schemas/ConstantDto'
        children:
          type: array
          items:
            $ref: '#/components/schemas/NodeDto'
          example: [{ constant: 4 }]
        named_children:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NodeDto'
          example: { 'field_name': { constant: 'account' } }
    NodeEvaluationDto:
      type: object
      required:
        - return_value
        - errors
      properties:
        return_value:
          type: object
          required:
            - is_omitted
          properties:
            value:
              $ref: '#/components/schemas/ConstantDto'
            is_omitted:
              type: boolean
        errors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EvaluationErrorDto'
        children:
          type: array
          items:
            $ref: '#/components/schemas/NodeEvaluationDto'
        named_children:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NodeEvaluationDto'
    ScenarioValidationErrorDto:
      type: object
      required:
        - error
        - message
      properties:
        error:
          $ref: '#/components/schemas/ScenarioValidationErrorCodeDto'
        message:
          type: string
    ScenarioValidationErrorCodeDto:
      type: string
      enum:
        - DATA_MODEL_NOT_FOUND
        - TRIGGER_OBJECT_NOT_FOUND
        - TRIGGER_CONDITION_REQUIRED
        - RULE_FORMULA_REQUIRED
        - SCORE_REVIEW_THRESHOLD_REQUIRED
        - SCORE_REJECT_THRESHOLD_REQUIRED
        - SCORE_REJECT_REVIEW_THRESHOLDS_MISSMATCH
    EvaluationErrorDto:
      type: object
      required:
        - error
        - message
      properties:
        error:
          $ref: '#/components/schemas/EvaluationErrorCodeDto'
        message:
          type: string
        argument_index:
          type: integer
        argument_name:
          type: string
    EvaluationErrorCodeDto:
      type: string
      enum:
        - UNEXPECTED_ERROR
        - UNDEFINED_FUNCTION
        - WRONG_NUMBER_OF_ARGUMENTS
        - MISSING_NAMED_ARGUMENT
        - ARGUMENTS_MUST_BE_INT_OR_FLOAT
        - ARGUMENTS_MUST_BE_INT_FLOAT_OR_TIME
        - ARGUMENT_MUST_BE_INTEGER
        - ARGUMENT_MUST_BE_STRING
        - ARGUMENT_MUST_BE_BOOLEAN
        - ARGUMENT_MUST_BE_LIST
        - ARGUMENT_MUST_BE_CONVERTIBLE_TO_DURATION
        - ARGUMENT_MUST_BE_TIME
        - ARGUMENT_REQUIRED
        - ARGUMENT_INVALID_TYPE
        - LIST_NOT_FOUND
        - DATABASE_ACCESS_NOT_FOUND
        - PAYLOAD_FIELD_NOT_FOUND
        - NULL_FIELD_READ
        - NO_ROWS_READ
        - DIVISION_BY_ZERO
        - PAYLOAD_FIELD_NOT_FOUND
        - RUNTIME_EXPRESSION_ERROR
    FuncAttributes:
      type: object
      required:
        - name
        - number_of_arguments
      properties:
        name:
          type: string
        number_of_arguments:
          type: number
        named_arguments:
          type: array
          items:
            type: string
    UploadLog:
      type: object
      required:
        - started_at
        - finished_at
        - status
        - lines_processed
      properties:
        started_at:
          type: string
          format: date-time
        finished_at:
          type: string
          format: date-time
        status:
          type: string
        lines_processed:
          type: integer
    Pagination:
      type: object
      required:
        - start_index
        - end_index
        - total_count
      properties:
        start_index:
          type: integer
        end_index:
          type: integer
        total_count:
          $ref: '#/components/schemas/PaginationCount'
    PaginationCount:
      type: object
      required:
        - value
        - is_max_count
      properties:
        value:
          type: integer
        is_max_count:
          type: boolean
    InboxDto:
      type: object
      required:
        - id
        - name
        - created_at
        - updated_at
        - status
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, archived]
        users:
          type: array
          items:
            $ref: '#/components/schemas/InboxUserDto'
        cases_count:
          type: number
    CreateInboxBodyDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    InboxUserDto:
      type: object
      required:
        - id
        - inbox_id
        - user_id
        - role
      properties:
        id:
          type: string
          format: uuid
        inbox_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/InboxUserRole'
    InboxUserRole:
      type: string
      enum: [member, admin]
    AddInboxUserBodyDto:
      type: object
      required:
        - user_id
        - role
      properties:
        user_id:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/InboxUserRole'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
            example: Unauthorized
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
            example: Forbidden
    '404':
      description: Not found
      content:
        application/json:
          schema:
            type: string
            example: Not found
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            type: string
            example: Duplicate Value
    '422':
      description: Unprocessable Content
      content:
        application/json:
          schema:
            type: object
            description: To be defined
